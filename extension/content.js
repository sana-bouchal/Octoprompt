// OctoPrompt Extension - Content Script
// Analyse les prompts en temps r√©el sur les plateformes IA

// ========== CONFIGURATION ==========
let isEnabled = true;
let aiModeEnabled = false;

// ========== R√àGLES D'ANALYSE ==========
const PROMPT_RULES = [
  {
    name: 'Longueur Optimale',
    category: 'Essentiel',
    weight: 25,
    check: (prompt) => {
      const words = prompt.split(/\s+/).filter(w => w.length > 0);
      return words.length >= 5 && words.length <= 200;
    },
    suggestion: 'Ajustez la longueur : ni trop court (min 5 mots), ni trop long (max 200 mots)'
  },
  {
    name: 'Verbes d\'Action',
    category: 'Essentiel',
    weight: 25,
    check: (prompt) => {
      const actionVerbs = [
        'g√©n√®re', 'cr√©e', 'analyse', 'synth√©tise', 'r√©dige', 'explique',
        'compare', 'liste', 'd√©cris', 'propose', 'd√©veloppe', '√©cris',
        'fais', 'montre', 'donne', 'construis', 'code', 'dessine', 'imagine',
        'con√ßois', '√©labore', 'produis', 'fournis'
      ];
      return actionVerbs.some(verb => prompt.toLowerCase().includes(verb));
    },
    suggestion: 'Utilisez des verbes d\'action clairs (ex: "g√©n√®re", "analyse", "r√©dige")'
  },
  {
    name: 'Clart√© du Sujet',
    category: 'Essentiel',
    weight: 20,
    check: (prompt) => {
      // Un prompt clair a au moins un nom commun significatif
      const words = prompt.split(/\s+/);
      return words.length >= 3; // Au moins 3 mots pour √™tre clair
    },
    suggestion: 'Soyez plus pr√©cis sur ce que vous voulez'
  },
  {
    name: 'R√¥le Sp√©cifique',
    category: 'Bonus',
    weight: 10,
    check: (prompt) => {
      const roleKeywords = ['agis en tant que', 'tu es un', 'tu es une', 'r√¥le :', 'joue le r√¥le', 'en tant que', 'expert', 'sp√©cialiste'];
      return roleKeywords.some(keyword => prompt.toLowerCase().includes(keyword));
    },
    suggestion: 'Bonus : Ajoutez un r√¥le sp√©cifique (ex: "Agis en tant que expert...")'
  },
  {
    name: 'Style ou Ton',
    category: 'Bonus',
    weight: 10,
    check: (prompt) => {
      const styleKeywords = [
        'photor√©aliste', 'minimaliste', 'humoristique', 'professionnel',
        'artistique', 'moderne', 'vintage', '√©l√©gant', 'cr√©atif', 'technique',
        'simple', 'd√©taill√©', 'formel', 'informel', 's√©rieux', 'ludique'
      ];
      return styleKeywords.some(keyword => prompt.toLowerCase().includes(keyword));
    },
    suggestion: 'Bonus : Sp√©cifiez un style ou ton (ex: "professionnel", "cr√©atif")'
  },
  {
    name: 'Format de Sortie',
    category: 'Bonus',
    weight: 5,
    check: (prompt) => {
      const formatKeywords = [
        'sous forme de', 'en json', 'tableau', 'paragraphes', 'liste',
        'points', '√©tapes', 'format', 'structure', 'sections'
      ];
      return formatKeywords.some(keyword => prompt.toLowerCase().includes(keyword));
    },
    suggestion: 'Bonus : Indiquez le format souhait√© (ex: "sous forme de liste")'
  },
  {
    name: 'Audience Cible',
    category: 'Bonus',
    weight: 3,
    check: (prompt) => {
      const audienceKeywords = [
        'pour', 'audience', 'public', 'lecteur', 'utilisateur',
        'd√©butant', 'expert', 'enfant', 'professionnel', 'client'
      ];
      return audienceKeywords.some(keyword => prompt.toLowerCase().includes(keyword));
    },
    suggestion: 'Bonus : Pr√©cisez l\'audience (ex: "pour des d√©butants")'
  },
  {
    name: 'Contraintes',
    category: 'Bonus',
    weight: 2,
    check: (prompt) => {
      const constraintKeywords = [
        'maximum', 'minimum', 'environ', 'limite', 'restriction',
        'en moins de', 'en plus de', 'entre', 'mots', 'caract√®res'
      ];
      return constraintKeywords.some(keyword => prompt.toLowerCase().includes(keyword));
    },
    suggestion: 'Bonus : Ajoutez des contraintes (ex: "en 100 mots maximum")'
  }
];

// ========== FONCTION D'ANALYSE ==========
async function analyzePrompt(prompt) {
  if (!prompt || prompt.trim().length === 0) {
    return {
      score: 0,
      passedRules: [],
      failedRules: PROMPT_RULES,
      suggestions: ['Veuillez entrer un prompt √† analyser.']
    };
  }

  // Si le mode IA est activ√©, utiliser l'IA
  if (aiModeEnabled && typeof aiEngine !== 'undefined') {
    console.log('ü§ñ Tentative d\'analyse avec IA...');
    const aiAnalysis = await aiEngine.analyzePrompt(prompt);
    
    if (aiAnalysis) {
      console.log('‚úÖ Analyse IA utilis√©e');
      return aiAnalysis;
    }
    
    console.log('‚ö†Ô∏è Fallback vers analyse par r√®gles');
  }

  // Analyse par r√®gles (fallback ou mode par d√©faut)
  const passedRules = PROMPT_RULES.filter(rule => rule.check(prompt));
  const failedRules = PROMPT_RULES.filter(rule => !rule.check(prompt));

  const totalWeight = PROMPT_RULES.reduce((sum, rule) => sum + rule.weight, 0);
  const achievedWeight = passedRules.reduce((sum, rule) => sum + rule.weight, 0);
  const score = Math.round((achievedWeight / totalWeight) * 100);

  const suggestions = failedRules.map(rule => rule.suggestion);
  
  let improvedPrompt = score < 100 ? generateImprovedPrompt(prompt, failedRules) : undefined;

  // Sauvegarder dans l'historique
  if (improvedPrompt && typeof promptHistory !== 'undefined') {
    promptHistory.addPrompt(prompt, improvedPrompt, score, 'rules');
  }

  return {
    score,
    passedRules,
    failedRules,
    suggestions,
    improvedPrompt
  };
}

// ========== G√âN√âRATION PROMPT AM√âLIOR√â ==========
function generateImprovedPrompt(originalPrompt, failedRules) {
  let improved = originalPrompt.trim();
  
  // D√©tection du contexte du prompt original
  const isCreativeTask = /image|design|cr√©atif|cr√©er|dessine|illustr/i.test(improved);
  const isTechnicalTask = /code|programm|fonction|algorithme|technique|d√©velopp/i.test(improved);
  const isAnalysisTask = /analys|√©tudi|examin|compar|√©valu/i.test(improved);
  const isWritingTask = /r√©dige|√©cris|article|texte|contenu/i.test(improved);
  
  // R√¥les vari√©s selon le contexte
  const roles = {
    creative: [
      'Tu es un designer cr√©atif exp√©riment√©.',
      'En tant que directeur artistique,',
      'Avec ton expertise en cr√©ation de contenu visuel,'
    ],
    technical: [
      'En tant que d√©veloppeur senior,',
      'Tu es un expert technique sp√©cialis√©.',
      'Avec ton exp√©rience en ing√©nierie logicielle,'
    ],
    analysis: [
      'Tu es un analyste expert.',
      'En tant que consultant sp√©cialis√©,',
      'Avec ton regard d\'expert analytique,'
    ],
    writing: [
      'Tu es un r√©dacteur professionnel.',
      'En tant qu\'expert en communication,',
      'Avec ton exp√©rience en r√©daction de contenu,'
    ],
    general: [
      'Tu es un expert dans ton domaine.',
      'En tant que professionnel qualifi√©,',
      'Avec ton expertise approfondie,',
      'Tu ma√Ætrises parfaitement le sujet.'
    ]
  };
  
  // Verbes d'action vari√©s selon le contexte
  const actionVerbs = {
    creative: ['Con√ßois', 'Cr√©e', 'Imagine', 'D√©veloppe', '√âlabore'],
    technical: ['D√©veloppe', 'Construis', 'Impl√©mente', 'Code', 'Con√ßois'],
    analysis: ['Analyse', 'Examine', '√âtudie', '√âvalue', 'D√©cortique'],
    writing: ['R√©dige', 'Compose', '√âcris', 'Formule', 'Produis'],
    general: ['G√©n√®re', 'Produis', 'Fournis', '√âlabore', 'D√©veloppe']
  };
  
  // Formats de sortie vari√©s
  const formats = [
    'Pr√©sente le r√©sultat de fa√ßon structur√©e et d√©taill√©e',
    'Organise ta r√©ponse en sections claires',
    'Structure la r√©ponse avec des titres et sous-parties',
    'Fournis une r√©ponse bien organis√©e et facile √† suivre',
    'Pr√©sente l\'information de mani√®re hi√©rarchis√©e'
  ];
  
  // Conclusions vari√©es
  const conclusions = [
    'Assure-toi que le r√©sultat soit complet et directement utilisable.',
    'Le r√©sultat doit √™tre pr√©cis et actionnable.',
    'Fournis tous les d√©tails n√©cessaires pour une mise en ≈ìuvre imm√©diate.',
    'La r√©ponse doit √™tre exhaustive et pratique.',
    'Inclus tous les √©l√©ments essentiels pour un r√©sultat optimal.'
  ];
  
  // S√©lection al√©atoire des √©l√©ments
  const randomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];
  
  // D√©terminer la cat√©gorie
  let category = 'general';
  if (isCreativeTask) category = 'creative';
  else if (isTechnicalTask) category = 'technical';
  else if (isAnalysisTask) category = 'analysis';
  else if (isWritingTask) category = 'writing';
  
  // Ajout du r√¥le si manquant
  const hasRole = failedRules.find(r => r.name === 'R√¥le Sp√©cifique');
  if (hasRole) {
    const rolePrefix = randomElement(roles[category]);
    improved = `${rolePrefix} ${improved}`;
  }
  
  // Ajout du verbe d'action si manquant
  const hasAction = failedRules.find(r => r.name === "Verbes d'Action");
  if (hasAction && !/^(g√©n√®re|cr√©e|analyse|explique|r√©dige|d√©veloppe|con√ßois)/i.test(improved)) {
    const actionVerb = randomElement(actionVerbs[category]);
    // Adapter le d√©but du prompt
    improved = improved.charAt(0).toLowerCase() + improved.slice(1);
    improved = `${actionVerb} ${improved}`;
  }
  
  // Ajout du format si manquant
  const hasFormat = failedRules.find(r => r.name === 'Format de Sortie');
  if (hasFormat) {
    improved += `. ${randomElement(formats)}`;
  }
  
  // Ajout d'une audience si manquante et pertinent
  const hasAudience = failedRules.find(r => r.name === 'Audience Cible');
  if (hasAudience && Math.random() > 0.5) {
    const audiences = [
      'pour un public professionnel',
      'destin√© √† des utilisateurs avertis',
      'adapt√© √† tous les niveaux',
      'pour une audience experte'
    ];
    improved += `, ${randomElement(audiences)}`;
  }
  
  // Ajout d'une conclusion vari√©e
  improved += `. ${randomElement(conclusions)}`;
  
  return improved.replace(/\s+/g, ' ').trim();
}

// ========== D√âTECTION DU CHAMP DE TEXTE ==========
function findPromptInput() {
  // Debug: afficher l'URL actuelle
  console.log('üêô OctoPrompt - Recherche du champ de texte sur:', window.location.hostname);
  
  // ChatGPT / OpenAI - Essayer plusieurs s√©lecteurs
  let input = document.querySelector('textarea[id*="prompt"]') ||
              document.querySelector('textarea[placeholder*="Message"]') ||
              document.querySelector('textarea[placeholder*="message"]') ||
              document.querySelector('textarea#prompt-textarea') ||
              document.querySelector('textarea[data-id="root"]') ||
              document.querySelector('div[contenteditable="true"][data-id*="root"]') ||
              document.querySelector('textarea.m-0') || // Nouveau ChatGPT
              document.querySelector('textarea[placeholder*="Envoy"]'); // ChatGPT FR
  
  // Claude.ai
  if (!input) {
    input = document.querySelector('div[contenteditable="true"]') ||
            document.querySelector('div.ProseMirror') ||
            document.querySelector('textarea.ProseMirror');
  }
  
  // Gemini
  if (!input) {
    input = document.querySelector('rich-textarea textarea') ||
            document.querySelector('textarea[aria-label*="message"]') ||
            document.querySelector('textarea[aria-label*="Message"]');
  }
  
  // Perplexity
  if (!input) {
    input = document.querySelector('textarea[placeholder*="Ask"]') ||
            document.querySelector('textarea[placeholder*="ask"]');
  }
  
  // Fallback: chercher n'importe quel textarea visible
  if (!input) {
    const textareas = document.querySelectorAll('textarea');
    for (const textarea of textareas) {
      if (textarea.offsetWidth > 0 && textarea.offsetHeight > 0) {
        console.log('üêô Textarea trouv√© (fallback):', textarea);
        input = textarea;
        break;
      }
    }
  }
  
  if (input) {
    console.log('üêô Champ de texte trouv√©:', input);
  } else {
    console.log('üêô Aucun champ de texte trouv√©');
  }
  
  return input;
}

// ========== INTERFACE UTILISATEUR ==========
let tooltipElement = null;

function createTooltip() {
  if (tooltipElement) return tooltipElement;
  
  const tooltip = document.createElement('div');
  tooltip.id = 'octoprompt-tooltip';
  tooltip.style.cssText = `
    position: fixed;
    bottom: 80px;
    right: 20px;
    min-width: 320px;
    max-width: 400px;
    background: linear-gradient(135deg, #0c1445 0%, #1a1f4d 100%);
    border: 2px solid rgba(96, 165, 250, 0.5);
    border-radius: 16px;
    padding: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(10px);
    z-index: 999999;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    display: none;
    transition: all 0.3s ease;
  `;
  
  document.body.appendChild(tooltip);
  tooltipElement = tooltip;
  return tooltip;
}

function updateTooltip(analysis) {
  if (!isEnabled) return;
  
  const tooltip = createTooltip();
  
  const getScoreColor = (score) => {
    if (score >= 80) return '#10b981';
    if (score >= 60) return '#f97316';
    return '#ef4444';
  };
  
  const scoreColor = getScoreColor(analysis.score);
  
  // Badge pour indiquer le mode utilis√©
  const modeBadge = aiModeEnabled 
    ? '<span style="background: linear-gradient(135deg, #8b5cf6, #ec4899); padding: 4px 8px; border-radius: 6px; font-size: 10px; font-weight: 600;">ü§ñ Mode IA</span>'
    : '<span style="background: rgba(100, 116, 139, 0.5); padding: 4px 8px; border-radius: 6px; font-size: 10px; font-weight: 600;">üìã Mode R√®gles</span>';
  
  let html = `
    <div style="margin-bottom: 15px;">
      <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 10px;">
        <h3 style="margin: 0; color: #60a5fa; font-size: 16px;">üêô OctoPrompt</h3>
        <div style="display: flex; align-items: center; gap: 8px;">
          ${modeBadge}
          <button id="octoprompt-close" style="background: none; border: none; color: #64748b; font-size: 20px; cursor: pointer;">√ó</button>
        </div>
      </div>
      <div style="text-align: center; margin-bottom: 15px;">
        <div style="font-size: 48px; font-weight: bold; color: ${scoreColor}; margin-bottom: 5px;">
          ${analysis.score}
        </div>
        <div style="color: #93c5fd; font-size: 12px;">/ 100</div>
      </div>
      <div style="background: rgba(255, 255, 255, 0.1); height: 8px; border-radius: 4px; overflow: hidden;">
        <div style="background: ${scoreColor}; height: 100%; width: ${analysis.score}%; transition: width 0.5s ease;"></div>
      </div>
    </div>
  `;
  
  if (analysis.improvedPrompt) {
    html += `
      <div style="background: rgba(6, 182, 212, 0.2); border: 1px solid rgba(6, 182, 212, 0.5); border-radius: 12px; padding: 12px; margin-bottom: 15px;">
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px;">
          <span style="color: #06b6d4; font-size: 14px; font-weight: 600;">‚ú® Prompt Am√©lior√©</span>
          <button id="octoprompt-copy" style="background: #06b6d4; color: white; border: none; padding: 4px 12px; border-radius: 6px; font-size: 11px; cursor: pointer; font-weight: 600;">Copier</button>
        </div>
        <div id="octoprompt-improved" style="color: #bfdbfe; font-size: 12px; line-height: 1.5; max-height: 150px; overflow-y: auto;">
          ${escapeHtml(analysis.improvedPrompt)}
        </div>
      </div>
    `;
  }
  
  if (analysis.suggestions && analysis.suggestions.length > 0) {
    html += `
      <div style="background: rgba(255, 255, 255, 0.05); border-radius: 12px; padding: 12px;">
        <div style="color: #f97316; font-size: 13px; font-weight: 600; margin-bottom: 8px;">üí° Suggestions</div>
        <div style="max-height: 120px; overflow-y: auto;">
    `;
    
    analysis.suggestions.slice(0, 3).forEach((suggestion, index) => {
      html += `
        <div style="color: #cbd5e1; font-size: 11px; margin-bottom: 6px; padding: 6px; background: rgba(255, 255, 255, 0.05); border-radius: 6px;">
          <span style="color: #f97316; font-weight: bold;">${index + 1}.</span> ${escapeHtml(suggestion)}
        </div>
      `;
    });
    
    html += `</div></div>`;
  }
  
  tooltip.innerHTML = html;
  tooltip.style.display = 'block';
  
  // Event listeners
  document.getElementById('octoprompt-close')?.addEventListener('click', () => {
    tooltip.style.display = 'none';
  });
  
  document.getElementById('octoprompt-copy')?.addEventListener('click', () => {
    navigator.clipboard.writeText(analysis.improvedPrompt);
    const btn = document.getElementById('octoprompt-copy');
    if (btn) {
      btn.textContent = '‚úì Copi√©!';
      setTimeout(() => { btn.textContent = 'Copier'; }, 2000);
    }
  });
}

function hideTooltip() {
  if (tooltipElement) {
    tooltipElement.style.display = 'none';
  }
}

// ========== FONCTION UTILITAIRE ==========
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// ========== SURVEILLANCE DU CHAMP DE TEXTE ==========
let currentInput = null;
let debounceTimer = null;

function attachToInput(input) {
  if (!input || currentInput === input) return;
  
  currentInput = input;
  
  const handleInput = () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
      const text = input.value || input.textContent || '';
      if (text.trim().length > 5) {
        const analysis = await analyzePrompt(text);
        updateTooltip(analysis);
      } else {
        hideTooltip();
      }
    }, 500);
  };
  
  input.addEventListener('input', handleInput);
  input.addEventListener('keyup', handleInput);
}

function initializeExtension() {
  console.log('üêô OctoPrompt - Initialisation...');
  
  // Charger les pr√©f√©rences
  chrome.storage.sync.get(['autoAnalyze', 'aiMode', 'apiKey'], async (result) => {
    isEnabled = result.autoAnalyze !== false;
    aiModeEnabled = result.aiMode === true;
    
    console.log('üêô Analyse automatique:', isEnabled ? 'activ√©e' : 'd√©sactiv√©e');
    console.log('ü§ñ Mode IA:', aiModeEnabled ? 'activ√©' : 'd√©sactiv√©');
    
    // Initialiser le moteur IA si activ√©
    if (aiModeEnabled && typeof aiEngine !== 'undefined') {
      await aiEngine.initialize();
      console.log('ü§ñ Moteur IA initialis√©');
    }
    
    if (isEnabled) {
      // Attendre que le DOM soit compl√®tement charg√©
      const tryFindInput = () => {
        const input = findPromptInput();
        if (input) {
          console.log('üêô Attachement au champ de texte...');
          attachToInput(input);
        } else {
          console.log('üêô Champ non trouv√©, r√©essai dans 1 seconde...');
          setTimeout(tryFindInput, 1000);
        }
      };
      
      // Essayer imm√©diatement
      tryFindInput();
      
      // Observer les changements dans le DOM
      const observer = new MutationObserver(() => {
        const input = findPromptInput();
        if (input && input !== currentInput) {
          console.log('üêô Nouveau champ d√©tect√© !');
          attachToInput(input);
        }
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
      
      console.log('üêô MutationObserver actif');
    }
  });
}

// ========== MESSAGES DU POPUP ==========
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('üêô Message re√ßu:', message);
  if (message.action === 'toggleAutoAnalyze') {
    isEnabled = message.enabled;
    console.log('üêô Toggle:', isEnabled ? 'ON' : 'OFF');
    if (!isEnabled) {
      hideTooltip();
    } else {
      const input = findPromptInput();
      if (input) {
        attachToInput(input);
      }
    }
  } else if (message.action === 'toggleAiMode') {
    aiModeEnabled = message.enabled;
    console.log('ü§ñ Mode IA:', aiModeEnabled ? 'ON' : 'OFF');
    if (aiModeEnabled && typeof aiEngine !== 'undefined') {
      aiEngine.initialize();
    }
  } else if (message.action === 'updateApiKey' || message.action === 'updateProvider') {
    if (typeof aiEngine !== 'undefined') {
      aiEngine.initialize();
      console.log('üîÑ Configuration IA mise √† jour');
    }
  }
});

// ========== D√âMARRAGE ==========
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeExtension);
} else {
  // DOM d√©j√† charg√©
  setTimeout(initializeExtension, 500);
}

console.log('üêô OctoPrompt extension charg√©e!');
